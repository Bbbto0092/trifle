// Code generated by Wire protocol buffer compiler, do not edit.
// Source: app.cash.trifle.api.alpha.MobileCertificateResponse in public.proto
import Foundation
import Wire

public struct MobileCertificateResponse {

    public var certificates: [Data]
    public var unknownFields: Data = .init()

    public init(certificates: [Data] = []) {
        self.certificates = certificates
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension MobileCertificateResponse : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension MobileCertificateResponse : Hashable {
}
#endif

#if swift(>=5.5)
extension MobileCertificateResponse : Sendable {
}
#endif

extension MobileCertificateResponse : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/app.cash.trifle.api.alpha.MobileCertificateResponse"
    }
}

extension MobileCertificateResponse : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var certificates: [Data] = []

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &certificates)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.certificates = certificates
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.certificates)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension MobileCertificateResponse : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.certificates = try container.decodeProtoArray(Data.self, forKey: "certificates")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let includeDefaults = encoder.protoDefaultValuesEncodingStrategy == .include

        if includeDefaults || !self.certificates.isEmpty {
            try container.encodeProtoArray(self.certificates, forKey: "certificates")
        }
    }
}
#endif
