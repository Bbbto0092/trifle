// Code generated by Wire protocol buffer compiler, do not edit.
// Source: app.cash.trifle.api.alpha.SigningMessage in public.proto
import Foundation
import Wire

/**
 * Datatype provided by the Trifle library associated with the signing of
 * the associated client data.
 */
public struct SigningMessage {

    /**
     * Signing Format version associated with this payload. This is to enable
     * immediate verification without having to parse the signed data.
     * Verifier should verify that this matches the signed version to prevent
     * rollback attacks.
     */
    public var version: UInt32?
    /**
     * Signing algorithm used to sign over the SigningMessage message.
     */
    public var signing_algorithm: Algorithm?
    /**
     * Data provided directly by the Trifle library client.
     */
    public var data: Data?
    public var unknownFields: Data = .init()

    public init(
        version: UInt32? = nil,
        signing_algorithm: Algorithm? = nil,
        data: Data? = nil
    ) {
        self.version = version
        self.signing_algorithm = signing_algorithm
        self.data = data
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SigningMessage : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SigningMessage : Hashable {
}
#endif

#if swift(>=5.5)
extension SigningMessage : Sendable {
}
#endif

extension SigningMessage : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/app.cash.trifle.api.alpha.SigningMessage"
    }
}

extension SigningMessage : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var version: UInt32? = nil
        var signing_algorithm: Algorithm? = nil
        var data: Data? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: version = try reader.decode(UInt32.self)
            case 2: signing_algorithm = try reader.decode(Algorithm.self)
            case 3: data = try reader.decode(Data.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.version = version
        self.signing_algorithm = signing_algorithm
        self.data = data
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.version)
        try writer.encode(tag: 2, value: self.signing_algorithm)
        try writer.encode(tag: 3, value: self.data)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension SigningMessage : Codable {
    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self.version = try container.decodeIfPresent(UInt32.self, forKey: "version")
        self.signing_algorithm = try container.decodeIfPresent(Algorithm.self, firstOfKeys: "signingAlgorithm", "signing_algorithm")
        self.data = try container.decodeIfPresent(stringEncoded: Data.self, forKey: "data")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase

        try container.encodeIfPresent(self.version, forKey: "version")
        try container.encodeIfPresent(self.signing_algorithm, forKey: preferCamelCase ? "signingAlgorithm" : "signing_algorithm")
        try container.encodeIfPresent(stringEncoded: self.data, forKey: "data")
    }
}
#endif
